@using BulletinBoard.Ui.Features.Announcements.Models.ActionModels
@model AnnouncementIndexViewModel

@{
    ViewData["Title"] = "Announcements";

    ViewBag.Categories = Model.Categories;
    ViewBag.SubCategories = Model.SubCategories;
}

@section Styles {
    <link rel="stylesheet" href="~/css/announcements.css" asp-append-version="true" />
}

<h1>@ViewData["Title"]</h1>

<!-- Button to trigger Create Modal -->
@await Html.PartialAsync("_AnnouncementsToolbar", Model)

<table class="table table-striped">
    <thead>
        <tr>
            <th>Title</th>
            <th>Category</th>
            <th>SubCategory</th>
            <th>Created</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var a in Model.Announcements)
        {
            <tr>
                <td>@a.Title</td>
                <td>@a.CategoryName</td>
                <td>@a.SubCategoryName</td>
                <td>@a.CreatedDate</td>
                <td>
                    <div class="btn-action-group" role="group" aria-label="Row actions">
                        <a asp-action="Details" asp-route-id="@a.Id"
                           class="btn btn-outline-info btn-sm"
                           data-bs-toggle="tooltip"
                           title="View">
                            <i class="bi bi-eye"></i>
                        </a>
                        <span data-bs-toggle="tooltip" title="Edit">
                        <button type="button"
                                class="btn btn-outline-primary btn-sm"
                                title="Edit"
                                data-bs-toggle="modal"
                                data-bs-target="#editModal"
                                data-url="@Url.Action("Edit", new { id = a.Id })">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        </span>
                        <form asp-action="Delete"
                              asp-route-id="@a.Id"
                              method="post"
                              onsubmit="return confirm('Really delete “@a.Title”?');"
                              class="d-inline">
                            @Html.AntiForgeryToken()
                            <button type="submit"
                                    class="btn btn-outline-danger btn-sm"
                                    data-bs-toggle="tooltip"
                                    title="Delete">
                                <i class="bi bi-trash"></i>
                            </button>
                        </form>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="modal fade" id="createModal" tabindex="-1" role="dialog" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <!-- Content will be loaded via AJAX -->
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <!-- Content will be loaded via AJAX -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Load Create form into modal body when opened
        function onModalShowFetchContent(containerId) {
            var modalEl = document.getElementById(containerId);
            modalEl.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var url = button.getAttribute('data-url');
            var modalBody = modalEl.querySelector('.modal-body');
            fetch(url)
                .then(response => response.text())
                .then(html => modalBody.innerHTML = html);
            });
        }
        onModalShowFetchContent('createModal');
        onModalShowFetchContent('editModal');
    </script>
    <script>
        function initializeAnnouncementModal(modalId, buttonSelector) {
          var modalEl = document.getElementById(modalId);

          modalEl.addEventListener('shown.bs.modal', function (event) {

            var url = event.relatedTarget.getAttribute('data-url');
            var modalBody = modalEl.querySelector('.modal-body');

            fetch(url)
              .then(r => r.ok ? r.text() : Promise.reject(r))
              .then(html => {
                modalBody.innerHTML = html;

                var btn = modalBody.querySelector(buttonSelector);
                var titleEl = modalBody.querySelector('#Title');
                var descEl = modalBody.querySelector('#Description');
                var catEl = modalBody.querySelector('#CategorySelect');
                var subEl = modalBody.querySelector('#SubCategorySelect');
                var baseUrl = '@Url.Action("GetByCategory", "SubCategoriesApi")';

                if (!btn || !titleEl || !descEl || !catEl || !subEl) {
                  console.error('Edit form wiring failed: missing elements');
                  return;
                }

                function rebuild(catId) {
                  subEl.innerHTML = '';
                  subEl.add(new Option('-- Select a SubCategory --', ''));
                  if (!catId) {
                    subEl.disabled = true;
                    return;
                  }
                  subEl.disabled = false;
                  fetch(`${baseUrl}?categoryId=${encodeURIComponent(catId)}`)
                    .then(r => r.ok ? r.json() : Promise.reject(r))
                    .then(list => {
                      list.forEach(s => {
                        var val  = s.id   ?? s.Id;
                        var txt  = s.name ?? s.Name;
                        subEl.add(new Option(txt, val));
                      });
                    })
                    .catch(e => console.error('Failed to load subcategories:', e));
                }

                function validate() {
                  var okTitle = titleEl.value.trim().length > 0;
                  var okDesc = descEl.value.trim().length  > 0;
                  var okCat = !!catEl.value;
                  var okSub = !!subEl.value;
                  btn.disabled = !(okTitle && okDesc && okCat && okSub);
                }

                titleEl.addEventListener('input',  validate);
                descEl.addEventListener('input',  validate);
                catEl.addEventListener('change', function() {
                  rebuild(this.value);
                  validate();
                });
                subEl.addEventListener('change', validate);

                validate();
              })
              .catch(err => console.error('Failed to load Edit form:', err));
          });
        };

        initializeAnnouncementModal('editModal', '#editAnnouncementFormBtn');
        initializeAnnouncementModal('createModal', '#createAnnouncementFormBtn');
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
          var triggers = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
          triggers.forEach(function(el) {
            new bootstrap.Tooltip(el);
          });
        });
    </script>

}

